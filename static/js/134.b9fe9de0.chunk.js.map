{"version":3,"file":"static/js/134.b9fe9de0.chunk.js","mappings":"iOA8DA,UA1De,WAAO,IAAD,EACnB,GAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACM,OAAVJ,GAEJK,EAAkBL,EACnB,GAAE,CAACA,IAEJ,IAAMK,EAAiB,mCAAG,WAAML,GAAN,iGAEOM,EAAAA,EAAAA,IAAmBN,GAF1B,OAEhBO,EAFgB,OAGtBX,EAAUW,EAAeC,KAAKC,SAHR,gDAKtBC,QAAQC,IAAI,SALU,yDAAH,sDAwBvB,OACE,4BACE,kBAAMC,SAjBW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBjB,EAAgB,CAAEC,MAAOe,EAAKE,SAASjB,MAAMkB,QAC7CH,EAAKI,OACN,EAYG,WACE,4BACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,SAZd,SAAAT,GACxB,IAAMU,EAAeV,EAAMW,OAAON,MAClC,GAAqB,KAAjBK,EACF,OAAOxB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEC,MAAOuB,GAC1B,OAQK,mBAAQH,KAAK,SAAb,SAAsB,eAExB,wBACGzB,EAAO8B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM5B,GAA1C,SACGyB,KAFID,EADC,QAUnB,C,+LC1DDK,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAS,mCAEFC,EAAS,mCAAG,8FACVF,EAAAA,EAAAA,IAAA,mCAAsCC,EAAtC,oBADU,mFAAH,qDAIT1B,EAAkB,mCAAG,WAAMN,GAAN,iFACnB+B,EAAAA,EAAAA,IAAA,+BACaC,EADb,iCAC4ChC,EAD5C,YADmB,mFAAH,sDAMlBkC,EAAmB,mCAAG,WAAMR,GAAN,iFACpBK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,oBAAkCM,EAAlC,oBADoB,mFAAH,sDAInBG,EAAgB,mCAAG,WAAMT,GAAN,iFACjBK,EAAAA,EAAAA,IAAA,iBACDL,EADC,4BACqBM,EADrB,oBADiB,mFAAH,sDAMhBI,EAAmB,mCAAG,WAAMV,GAAN,iFACpBK,EAAAA,EAAAA,IAAA,iBACDL,EADC,4BACqBM,EADrB,2BADoB,mFAAH,qD","sources":["pages/Movies.jsx","services/TmdbApi.js"],"sourcesContent":["import { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { handleMoviesSearch } from 'services/TmdbApi';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === null) return;\n\n    getSearchedMovies(query);\n  }, [query]);\n\n  const getSearchedMovies = async query => {\n    try {\n      const searchedMovies = await handleMoviesSearch(query);\n      setMovies(searchedMovies.data.results);\n    } catch (error) {\n      console.log('Error');\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  const updateQueryString = event => {\n    const movieIdValue = event.target.value;\n    if (movieIdValue === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: movieIdValue });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" name=\"query\" onChange={updateQueryString} />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APIKEY = 'b2f603dc7bfb8f273c9f4e293e842183';\n\nexport const getMovies = async () => {\n  return await axios.get(`trending/all/day?api_key=${APIKEY}&language=en-US`);\n};\n\nexport const handleMoviesSearch = async query => {\n  return await axios.get(\n    `search/movie?api_key=${APIKEY}&language=en-US&query=${query}&page=1`\n  );\n};\n\nexport const handleMoviesDetails = async id => {\n  return await axios.get(`/movie/${id}?api_key=${APIKEY}&language=en-US`);\n};\n\nexport const handleMoviesCast = async id => {\n  return await axios.get(\n    `/movie/${id}/credits?api_key=${APIKEY}&language=en-US`\n  );\n};\n\nexport const handleMoviesReviews = async id => {\n  return await axios.get(\n    `/movie/${id}/reviews?api_key=${APIKEY}&language=en-US&page=1`\n  );\n};\n"],"names":["useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","getSearchedMovies","handleMoviesSearch","searchedMovies","data","results","console","log","onSubmit","event","preventDefault","form","currentTarget","elements","value","reset","type","name","onChange","movieIdValue","target","map","id","title","to","state","from","axios","APIKEY","getMovies","handleMoviesDetails","handleMoviesCast","handleMoviesReviews"],"sourceRoot":""}