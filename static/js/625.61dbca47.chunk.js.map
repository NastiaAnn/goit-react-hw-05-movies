{"version":3,"file":"static/js/625.61dbca47.chunk.js","mappings":"sIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,+GCyBA,EAxDe,WAAO,IAAD,EAEnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAErCC,GAAWC,EAAAA,EAAAA,MAEXC,EANS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,UAMrCC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,SAASP,EAAnB,KAEzCQ,EAAAA,EAAAA,YAAU,WAAM,kCAId,mHAJc,sBACA,OAAVR,GADU,mCAQdS,EACD,GAAE,CAACT,IAiBJ,OACE,4BACE,kBAAMU,SAjBW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBf,EAAgB,CAAEC,MAAOa,EAAKE,SAASf,MAAMjB,QAC7C8B,EAAKG,OACN,EAYG,WACE,4BACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,SAZd,SAAAR,GACxB,IAAMS,EAAeT,EAAMU,OAAOtC,MAClC,GAAqB,KAAjBqC,EACF,OAAOrB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEC,MAAOoB,GAC1B,OAQK,mBAAQH,KAAK,SAAb,SAAsB,eAExB,wBACGb,EAAckB,KAAI,SAAAhB,GAAK,OACtB,yBACE,SAAC,KAAD,CAAMiB,GAAE,UAAKjB,GAASkB,MAAO,CAAEC,KAAMvB,GAArC,SACGI,KAFIA,EADa,QAU/B,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","pages/Movies.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useEffect } from 'react';\n\nconst Movies = () => {\n  const movies = ['movie1', 'movie2', 'movie3', 'movie4', 'movie5', 'movie6'];\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const location = useLocation();\n\n  const visibleMovies = movies.filter(movie => movie.includes(query));\n\n  useEffect(() => {\n    if (query === null) return;\n\n    // Ваша асинхронна операція, наприклад HTTP-запит за інформацією про фільми\n    async function fetchMovies() {\n      // Виконайте тут ваші асинхронні дії\n    }\n\n    fetchMovies();\n  }, [query]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  const updateQueryString = event => {\n    const movieIdValue = event.target.value;\n    if (movieIdValue === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: movieIdValue });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" name=\"query\" onChange={updateQueryString} />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {visibleMovies.map(movie => (\n          <li key={movie}>\n            <Link to={`${movie}`} state={{ from: location }}>\n              {movie}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","visibleMovies","filter","movie","includes","useEffect","fetchMovies","onSubmit","event","preventDefault","form","currentTarget","elements","reset","type","name","onChange","movieIdValue","target","map","to","state","from"],"sourceRoot":""}